{"ast":null,"code":"import { GET_MOVIE, GET_MOVIE_ERR, SET_MOVIES, SET_MOVIE_ERR, SET_SEARCHED_MOVIE, GET_SEARCHED_MOVIE, LOAD_MOVIE_DETAILS, SET_TVSHOWS_ERR, SET_TVSHOWS, GET_SHOW, GET_SHOW_ERR, SET_RELATED_MOVIES, NEXT_PAGE, PREV_PAGE, GET_RELATED_MOVIE_ID, LOAD_MORE } from \"../actions/types\";\nimport axios from \"axios\";\nimport config from \"../config.json\";\nimport { LOCATION_CHANGE } from \"connected-react-router\";\nexport const setSearchedMovies = movie => async dispatch => {\n  try {\n    dispatch({\n      type: SET_SEARCHED_MOVIE,\n      payload: movie\n    });\n  } catch (e) {\n    return;\n  }\n};\nexport const getRelatedMovie = id => async dispatch => {\n  dispatch({\n    type: GET_RELATED_MOVIE_ID,\n    payload: id\n  });\n};\nexport const getSearchedMovie = id => async dispatch => {\n  dispatch({\n    type: GET_SEARCHED_MOVIE,\n    payload: id\n  });\n};\nexport const getMovie = id => async dispatch => {\n  try {\n    dispatch({\n      type: GET_MOVIE,\n      payload: id\n    });\n  } catch (e) {\n    dispatch({\n      type: GET_MOVIE_ERR\n    });\n  }\n};\nexport const setMovies = movies => async dispatch => {\n  try {\n    dispatch({\n      type: SET_MOVIES,\n      payload: movies\n    });\n  } catch (e) {\n    dispatch({\n      type: SET_MOVIE_ERR,\n      payload: e\n    });\n  }\n};\nexport const setTvShowsReducer = tvShows => async dispatch => {\n  try {\n    dispatch({\n      type: SET_TVSHOWS,\n      payload: tvShows\n    });\n  } catch (err) {\n    dispatch({\n      type: SET_TVSHOWS_ERR,\n      payload: err\n    });\n  }\n};\nexport const getShow = id => async dispatch => {\n  dispatch({\n    type: GET_SHOW,\n    payload: id\n  });\n\n  try {} catch (e) {\n    dispatch({\n      type: GET_SHOW_ERR\n    });\n  }\n};\nexport const loadMovieDetails = () => async dispatch => {\n  dispatch({\n    type: LOAD_MOVIE_DETAILS\n  });\n};\nexport const setRelatedMovies = () => async dispatch => {\n  try {\n    const resId = await axios.get(\"/api/movie/genre_id\");\n    await fetch(`https://api.themoviedb.org/3/movie/${resId.data}/similar?api_key=${config.API_KEY}&language=en-US&page=1`).then(res => res.json()).then(data => {\n      let shuffled = data.results.sort(() => 0.5 - Math.random());\n      let selected = shuffled.slice(0, 5);\n      dispatch({\n        type: SET_RELATED_MOVIES,\n        payload: selected\n      });\n    });\n  } catch (error) {\n    console.error(error.response);\n  }\n};\nexport const fetchApi = key => async dispatch => {\n  let res = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&page=${page}`);\n  let data = await res.json();\n  dispatch({\n    type: SET_MOVIES,\n    payload: data.results\n  });\n};\nexport const loadMore = (movies, key, page) => async dispatch => {\n  console.log('===> ', movies, page);\n  let res = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&page=${++page}`);\n  let data = await res.json();\n  dispatch({\n    type: NEXT_PAGE,\n    payload: page\n  }); // dispatch({\n  //   type: LOAD_MORE,\n  //   payload: \n  // })\n};\nexport const nextPage = page => async dispatch => {\n  dispatch({\n    type: NEXT_PAGE,\n    payload: page\n  });\n};\nexport const prevPage = page => async dispatch => {\n  page = page === 1 ? page = 2 : page;\n  dispatch({\n    type: PREV_PAGE,\n    payload: page\n  });\n};","map":{"version":3,"sources":["/Users/enoch/dev/movie-shop/client/src/actions/movie.js"],"names":["GET_MOVIE","GET_MOVIE_ERR","SET_MOVIES","SET_MOVIE_ERR","SET_SEARCHED_MOVIE","GET_SEARCHED_MOVIE","LOAD_MOVIE_DETAILS","SET_TVSHOWS_ERR","SET_TVSHOWS","GET_SHOW","GET_SHOW_ERR","SET_RELATED_MOVIES","NEXT_PAGE","PREV_PAGE","GET_RELATED_MOVIE_ID","LOAD_MORE","axios","config","LOCATION_CHANGE","setSearchedMovies","movie","dispatch","type","payload","e","getRelatedMovie","id","getSearchedMovie","getMovie","setMovies","movies","setTvShowsReducer","tvShows","err","getShow","loadMovieDetails","setRelatedMovies","resId","get","fetch","data","API_KEY","then","res","json","shuffled","results","sort","Math","random","selected","slice","error","console","response","fetchApi","key","page","loadMore","log","nextPage","prevPage"],"mappings":"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","sourcesContent":["import {\n  GET_MOVIE,\n  GET_MOVIE_ERR,\n  SET_MOVIES,\n  SET_MOVIE_ERR,\n  SET_SEARCHED_MOVIE,\n  GET_SEARCHED_MOVIE,\n  LOAD_MOVIE_DETAILS,\n  SET_TVSHOWS_ERR,\n  SET_TVSHOWS,\n  GET_SHOW,\n  GET_SHOW_ERR,\n  SET_RELATED_MOVIES,\n  NEXT_PAGE,\n  PREV_PAGE,\n  GET_RELATED_MOVIE_ID,\n  LOAD_MORE\n} from \"../actions/types\";\nimport axios from \"axios\";\nimport config from \"../config.json\";\nimport { LOCATION_CHANGE } from \"connected-react-router\";\n\n\n\nexport const setSearchedMovies = (movie) => async (dispatch) => {\n  try {\n    dispatch({\n      type: SET_SEARCHED_MOVIE,\n      payload: movie,\n    });\n  } catch (e) {\n    return;\n  }\n};\n\n\n\nexport const getRelatedMovie = (id) => async (dispatch) => {\n  dispatch({\n    type: GET_RELATED_MOVIE_ID,\n    payload: id,\n  });\n};\n\n\n\n\nexport const getSearchedMovie = (id) => async (dispatch) => {\n  dispatch({\n    type: GET_SEARCHED_MOVIE,\n    payload: id,\n  });\n};\n\n\n\nexport const getMovie = (id) => async (dispatch) => {\n  try {\n\n    dispatch({\n      type: GET_MOVIE,\n      payload: id,\n    });\n  } catch (e) {\n    dispatch({\n      type: GET_MOVIE_ERR,\n    });\n  }\n};\n\n\n\n\nexport const setMovies = (movies) => async (dispatch) => {\n  try {\n    dispatch({\n      type: SET_MOVIES,\n      payload: movies,\n    });\n  } catch (e) {\n    dispatch({\n      type: SET_MOVIE_ERR,\n      payload: e,\n    });\n  }\n};\n\n\n\n\nexport const setTvShowsReducer = (tvShows) => async (dispatch) => {\n  try {\n    dispatch({\n      type: SET_TVSHOWS,\n      payload: tvShows,\n    });\n  } catch (err) {\n    dispatch({\n      type: SET_TVSHOWS_ERR,\n      payload: err\n    });\n  }\n};\n\n\n\n\nexport const getShow = (id) => async (dispatch) => {\n  dispatch({\n    type: GET_SHOW,\n    payload: id,\n  });\n  try {\n  } catch (e) {\n    dispatch({\n      type: GET_SHOW_ERR,\n    });\n  }\n};\n\n\n\n\nexport const loadMovieDetails = () => async (dispatch) => {\n  dispatch({\n    type: LOAD_MOVIE_DETAILS,\n  });\n};\n\n\n\n\nexport const setRelatedMovies = () => async (dispatch) => {\n  try {\n    const resId = await axios.get(\"/api/movie/genre_id\");\n\n    await fetch(\n      `https://api.themoviedb.org/3/movie/${resId.data}/similar?api_key=${config.API_KEY}&language=en-US&page=1`\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        let shuffled = data.results.sort(() => 0.5 - Math.random());\n\n        let selected = shuffled.slice(0, 5);\n\n        dispatch({\n          type: SET_RELATED_MOVIES,\n          payload: selected,\n        });\n      });\n  } catch (error) {\n    console.error(error.response);\n  }\n};\n\n\n\n\n\nexport const fetchApi = (key) => async (dispatch) => {\n\n  let res = await fetch(\n    `https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&page=${page}`\n  );\n\n  let data = await res.json();\n\n  dispatch({\n    type: SET_MOVIES,\n    payload: data.results,\n  });\n};\n\n\n\nexport const loadMore = (movies, key, page) => async (dispatch) => {\n  console.log('===> ', movies, page);\n\n  let res = await fetch(\n    `https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&page=${++page}`\n  );\n\n  let data = await res.json();\n\n  dispatch({\n    type: NEXT_PAGE,\n    payload: page\n  })\n\n  // dispatch({\n  //   type: LOAD_MORE,\n  //   payload: \n  // })\n};\n\n\n\nexport const nextPage = (page) => async (dispatch) => {\n  dispatch({\n    type: NEXT_PAGE,\n    payload: page,\n  });\n};\n\n\n\nexport const prevPage = (page) => async (dispatch) => {\n  page = page === 1 ? (page = 2) : page;\n  dispatch({\n    type: PREV_PAGE,\n    payload: page,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}