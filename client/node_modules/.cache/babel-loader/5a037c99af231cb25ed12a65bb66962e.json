{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { PROFILE_ERROR, CLEAR_PROFILE, ACCOUNT_DELETED, GET_PROFILE } from \"./types\"; // Get profile by ID\n\nexport const getProfileById = userId => async dispatch => {\n  try {\n    const res = await axios.get(`/api/profile/${userId}`);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Create or update profile\n\nexport const createProfile = (name, email) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const formData = JSON.stringify(name, email);\n    const res = await axios.post(\"/api/profile\", formData, config);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert(\"Profile Created\", \"success\"));\n  } catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // Delete account\n\nexport const deleteAccount = () => async dispatch => {\n  if (window.confirm(\"Are you sure? this can NOT be undone!\")) {\n    try {\n      await axios.delete(\"/api/profile\");\n      dispatch({\n        type: CLEAR_PROFILE\n      });\n      dispatch({\n        type: ACCOUNT_DELETED\n      });\n      dispatch(setAlert(\"Your account has been permanently deleted\"));\n    } catch (error) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: {\n          msg: error.response.statusText,\n          status: error.response.status\n        }\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/Users/enoch/dev/movie-shop/client/src/actions/profile.js"],"names":["axios","setAlert","PROFILE_ERROR","CLEAR_PROFILE","ACCOUNT_DELETED","GET_PROFILE","getProfileById","userId","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","createProfile","name","email","config","headers","formData","JSON","stringify","post","error","errors","forEach","deleteAccount","window","confirm","delete"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { setAlert } from \"./alert\";\n\nimport {\n  PROFILE_ERROR,\n  CLEAR_PROFILE,\n  ACCOUNT_DELETED,\n  GET_PROFILE,\n} from \"./types\";\n\n\n\n\n// Get profile by ID\nexport const getProfileById = userId => async dispatch => {\n\n  try {\n    const res = await axios.get(`/api/profile/${userId}`);\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } \n  catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n\n\n\n\n\n\n// Create or update profile\nexport const createProfile = (name, email) => async (dispatch) => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const formData = JSON.stringify(name, email);\n\n    const res = await axios.post(\"/api/profile\", formData, config);\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data,\n    });\n\n    dispatch(setAlert(\"Profile Created\", \"success\"));\n\n  } catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status,\n      },\n    });\n  }\n};\n\n// Delete account\nexport const deleteAccount = () => async (dispatch) => {\n  if (window.confirm(\"Are you sure? this can NOT be undone!\")) {\n    try {\n      await axios.delete(\"/api/profile\");\n\n      dispatch({ type: CLEAR_PROFILE });\n      dispatch({ type: ACCOUNT_DELETED });\n\n      dispatch(setAlert(\"Your account has been permanently deleted\"));\n    } catch (error) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: {\n          msg: error.response.statusText,\n          status: error.response.status,\n        },\n      });\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}