{"ast":null,"code":"import { GET_MOVIE, GET_MOVIE_ERR, SET_MOVIES, SET_MOVIE_ERR, SET_SEARCHED_MOVIE, GET_SEARCHED_MOVIE, LOAD_MOVIE_DETAILS, SET_TVSHOWS_ERR, SET_TVSHOWS, GET_SHOW, GET_SHOW_ERR, SET_RELATED_MOVIES, NEXT_PAGE, PREV_PAGE, GET_RELATED_MOVIE_ID, LOAD_MORE, LOAD_MOVIES } from \"../actions/types\";\nimport axios from \"axios\";\nimport config from \"../config.json\";\nimport store from \"../store\";\nexport const setSearchedMovies = movie => async dispatch => {\n  try {\n    dispatch({\n      type: SET_SEARCHED_MOVIE,\n      payload: movie\n    });\n  } catch (e) {\n    return;\n  }\n};\nexport const getRelatedMovie = id => async dispatch => {\n  dispatch({\n    type: GET_RELATED_MOVIE_ID,\n    payload: id\n  });\n};\nexport const loadMovies = () => async dispatch => {\n  console.log(store);\n  dispatch({\n    type: LOAD_MOVIES\n  });\n};\nexport const getSearchedMovie = id => async dispatch => {\n  dispatch({\n    type: GET_SEARCHED_MOVIE,\n    payload: id\n  });\n};\nexport const getMovie = id => async dispatch => {\n  try {\n    dispatch({\n      type: GET_MOVIE,\n      payload: id\n    });\n  } catch (e) {\n    dispatch({\n      type: GET_MOVIE_ERR\n    });\n  }\n};\nexport const setMovies = api_key => async dispatch => {\n  let res = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${api_key}&language=en-US&page=${1}`);\n  let data = await res.json();\n\n  try {\n    dispatch({\n      type: SET_MOVIES,\n      payload: data.results\n    });\n  } catch (e) {\n    dispatch({\n      type: SET_MOVIE_ERR,\n      payload: e\n    });\n  }\n};\nexport const setTvShowsReducer = tvShows => async dispatch => {\n  try {\n    dispatch({\n      type: SET_TVSHOWS,\n      payload: tvShows\n    });\n  } catch (err) {\n    dispatch({\n      type: SET_TVSHOWS_ERR,\n      payload: err\n    });\n  }\n};\nexport const getShow = id => async dispatch => {\n  dispatch({\n    type: GET_SHOW,\n    payload: id\n  });\n\n  try {} catch (e) {\n    dispatch({\n      type: GET_SHOW_ERR\n    });\n  }\n};\nexport const loadMovieDetails = () => async dispatch => {\n  dispatch({\n    type: LOAD_MOVIE_DETAILS\n  });\n};\nexport const setRelatedMovies = () => async dispatch => {\n  try {\n    const resId = await axios.get(\"/api/movie/genre_id\");\n    await fetch(`https://api.themoviedb.org/3/movie/${resId.data}/similar?api_key=${config.API_KEY}&language=en-US&page=1`).then(res => res.json()).then(data => {\n      let shuffled = data.results.sort(() => 0.5 - Math.random());\n      let selected = shuffled.slice(0, 5);\n      dispatch({\n        type: SET_RELATED_MOVIES,\n        payload: selected\n      });\n    });\n  } catch (error) {\n    console.error(error.response);\n  }\n};\nexport const fetchApi = (key, movies, store) => async dispatch => {// dispatch({\n  //   type: SET_MOVIES,\n  //   payload: data.results,\n  // });\n};\nexport const loadMore = (movies, key, page) => async dispatch => {\n  let movies = fetchApi(key);\n  let res = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&page=${page}`);\n  let data = await res.json();\n  dispatch({\n    type: SET_MOVIES,\n    payload: data.results\n  });\n  console.log(data.results.concat(movies));\n  dispatch({\n    type: LOAD_MORE,\n    payload: data.results.concat(movies)\n  });\n  dispatch({\n    type: NEXT_PAGE,\n    payload: ++page\n  });\n};\nexport const nextPage = page => async dispatch => {\n  dispatch({\n    type: NEXT_PAGE,\n    payload: page\n  });\n};\nexport const prevPage = page => async dispatch => {\n  page = page === 1 ? page = 2 : page;\n  dispatch({\n    type: PREV_PAGE,\n    payload: page\n  });\n};","map":{"version":3,"sources":["/Users/enoch/dev/movie-shop/client/src/actions/movie.js"],"names":["GET_MOVIE","GET_MOVIE_ERR","SET_MOVIES","SET_MOVIE_ERR","SET_SEARCHED_MOVIE","GET_SEARCHED_MOVIE","LOAD_MOVIE_DETAILS","SET_TVSHOWS_ERR","SET_TVSHOWS","GET_SHOW","GET_SHOW_ERR","SET_RELATED_MOVIES","NEXT_PAGE","PREV_PAGE","GET_RELATED_MOVIE_ID","LOAD_MORE","LOAD_MOVIES","axios","config","store","setSearchedMovies","movie","dispatch","type","payload","e","getRelatedMovie","id","loadMovies","console","log","getSearchedMovie","getMovie","setMovies","api_key","res","fetch","data","json","results","setTvShowsReducer","tvShows","err","getShow","loadMovieDetails","setRelatedMovies","resId","get","API_KEY","then","shuffled","sort","Math","random","selected","slice","error","response","fetchApi","key","movies","loadMore","page","concat","nextPage","prevPage"],"mappings":"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","sourcesContent":["import {\n  GET_MOVIE,\n  GET_MOVIE_ERR,\n  SET_MOVIES,\n  SET_MOVIE_ERR,\n  SET_SEARCHED_MOVIE,\n  GET_SEARCHED_MOVIE,\n  LOAD_MOVIE_DETAILS,\n  SET_TVSHOWS_ERR,\n  SET_TVSHOWS,\n  GET_SHOW,\n  GET_SHOW_ERR,\n  SET_RELATED_MOVIES,\n  NEXT_PAGE,\n  PREV_PAGE,\n  GET_RELATED_MOVIE_ID,\n  LOAD_MORE,\n  LOAD_MOVIES\n} from \"../actions/types\";\nimport axios from \"axios\";\nimport config from \"../config.json\";\nimport store from \"../store\";\n\n\n\nexport const setSearchedMovies = (movie) => async (dispatch) => {\n  try {\n    dispatch({\n      type: SET_SEARCHED_MOVIE,\n      payload: movie,\n    });\n  } catch (e) {\n    return;\n  }\n};\n\n\n\nexport const getRelatedMovie = (id) => async (dispatch) => {\n  dispatch({\n    type: GET_RELATED_MOVIE_ID,\n    payload: id,\n  });\n};\n\nexport const loadMovies = () => async (dispatch) => {\n\n  console.log(store)\n\n  dispatch({\n    type: LOAD_MOVIES,\n  })\n\n\n}\n\n\nexport const getSearchedMovie = (id) => async (dispatch) => {\n  dispatch({\n    type: GET_SEARCHED_MOVIE,\n    payload: id,\n  });\n};\n\n\n\nexport const getMovie = (id) => async (dispatch) => {\n  try {\n\n    dispatch({\n      type: GET_MOVIE,\n      payload: id,\n    });\n  } catch (e) {\n    dispatch({\n      type: GET_MOVIE_ERR,\n    });\n  }\n};\n\n\n\n\nexport const setMovies = (api_key) => async (dispatch) => {\n\n  let res = await fetch(\n    `https://api.themoviedb.org/3/discover/movie?api_key=${api_key}&language=en-US&page=${1}`\n  );\n\n  let data = await res.json();\n\n  try {\n    dispatch({\n      type: SET_MOVIES,\n      payload: data.results,\n    });\n  } catch (e) {\n    dispatch({\n      type: SET_MOVIE_ERR,\n      payload: e,\n    });\n  }\n};\n\n\n\n\nexport const setTvShowsReducer = (tvShows) => async (dispatch) => {\n  try {\n    dispatch({\n      type: SET_TVSHOWS,\n      payload: tvShows,\n    });\n  } catch (err) {\n    dispatch({\n      type: SET_TVSHOWS_ERR,\n      payload: err\n    });\n  }\n};\n\n\n\n\nexport const getShow = (id) => async (dispatch) => {\n  dispatch({\n    type: GET_SHOW,\n    payload: id,\n  });\n  try {\n  } catch (e) {\n    dispatch({\n      type: GET_SHOW_ERR,\n    });\n  }\n};\n\n\n\n\nexport const loadMovieDetails = () => async (dispatch) => {\n  dispatch({\n    type: LOAD_MOVIE_DETAILS,\n  });\n};\n\n\n\n\nexport const setRelatedMovies = () => async (dispatch) => {\n  try {\n    const resId = await axios.get(\"/api/movie/genre_id\");\n\n    await fetch(\n      `https://api.themoviedb.org/3/movie/${resId.data}/similar?api_key=${config.API_KEY}&language=en-US&page=1`\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        let shuffled = data.results.sort(() => 0.5 - Math.random());\n\n        let selected = shuffled.slice(0, 5);\n\n        dispatch({\n          type: SET_RELATED_MOVIES,\n          payload: selected,\n        });\n      });\n  } catch (error) {\n    console.error(error.response);\n  }\n};\n\n\n\n\n\nexport const fetchApi = (key, movies, store) => async (dispatch) => {\n\n  \n\n\n  // dispatch({\n  //   type: SET_MOVIES,\n  //   payload: data.results,\n  // });\n};\n\n\n\nexport const loadMore = (movies, key, page) => async (dispatch) => {\n \n  let movies = fetchApi(key)\n\n  let res = await fetch(\n    `https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&page=${page}`\n  );\n\n  let data = await res.json();\n\n  dispatch({\n    type: SET_MOVIES,\n    payload: data.results\n  })\n\n  console.log(data.results.concat(movies))\n\n  dispatch({\n    type: LOAD_MORE,\n    payload: data.results.concat(movies)\n  })\n\n  dispatch({\n    type: NEXT_PAGE,\n    payload: ++page\n  })\n\n};\n\n\n\nexport const nextPage = (page) => async (dispatch) => {\n  dispatch({\n    type: NEXT_PAGE,\n    payload: page,\n  });\n};\n\n\n\nexport const prevPage = (page) => async (dispatch) => {\n  page = page === 1 ? (page = 2) : page;\n  dispatch({\n    type: PREV_PAGE,\n    payload: page,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}