{"ast":null,"code":"import { GET_MOVIE, GET_MOVIE_ERR, SET_MOVIES, SET_MOVIE_ERR, SET_SEARCHED_MOVIE, GET_SEARCHED_MOVIE, LOAD_MOVIE_DETAILS, SET_TVSHOWS_ERR, SET_TVSHOWS, GET_SHOW, GET_SHOW_ERR, SET_RELATED_MOVIES, NEXT_PAGE, PREV_PAGE, GET_RELATED_MOVIE_ID, LOAD_MORE, LOAD_MOVIES } from \"../actions/types\";\nimport axios from \"axios\";\nimport config from \"../config.json\";\nimport store from \"../store\";\nimport { API_URL, API_KEY, IMAGE_BASE_URL, BACKDROP_SIZE, POSTER_SIZE } from \"../../\";\nlet movieStore = store.store.getState().movie;\nlet apiKey = config.API_KEY;\nexport const setSearchedMovies = movie => async dispatch => {\n  try {\n    dispatch({\n      type: SET_SEARCHED_MOVIE,\n      payload: movie\n    });\n  } catch (e) {\n    return;\n  }\n};\nexport const getRelatedMovie = id => async dispatch => {\n  dispatch({\n    type: GET_RELATED_MOVIE_ID,\n    payload: id\n  });\n};\nexport const loadMovies = () => async dispatch => {\n  dispatch({\n    type: LOAD_MOVIES\n  });\n};\nexport const getSearchedMovie = id => async dispatch => {\n  dispatch({\n    type: GET_SEARCHED_MOVIE,\n    payload: id\n  });\n};\nexport const getMovie = id => async dispatch => {\n  try {\n    dispatch({\n      type: GET_MOVIE,\n      payload: id\n    });\n  } catch (e) {\n    dispatch({\n      type: GET_MOVIE_ERR\n    });\n  }\n}; // export const fetchMovies = () => async (dispatch) => {\n//   let res = await fetch(\n//     `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&language=en-US&page=${movieStore.page}`\n//   );\n//   let data = await res.json();\n// }\n\nexport const setMovies = () => async dispatch => {\n  let res = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&language=en-US&page=${movieStore.page}`);\n  let data = await res.json();\n\n  try {\n    dispatch({\n      type: SET_MOVIES,\n      payload: data.results\n    });\n  } catch (e) {\n    dispatch({\n      type: SET_MOVIE_ERR,\n      payload: e\n    });\n  }\n};\nexport const setTvShowsReducer = tvShows => async dispatch => {\n  try {\n    dispatch({\n      type: SET_TVSHOWS,\n      payload: tvShows\n    });\n  } catch (err) {\n    dispatch({\n      type: SET_TVSHOWS_ERR,\n      payload: err\n    });\n  }\n};\nexport const getShow = id => async dispatch => {\n  dispatch({\n    type: GET_SHOW,\n    payload: id\n  });\n\n  try {} catch (e) {\n    dispatch({\n      type: GET_SHOW_ERR\n    });\n  }\n};\nexport const loadMovieDetails = () => async dispatch => {\n  dispatch({\n    type: LOAD_MOVIE_DETAILS\n  });\n};\nexport const setRelatedMovies = () => async dispatch => {\n  try {\n    const resId = await axios.get(\"/api/movie/genre_id\");\n    await fetch(`https://api.themoviedb.org/3/movie/${resId.data}/similar?api_key=${config.API_KEY}&language=en-US&page=1`).then(res => res.json()).then(data => {\n      let shuffled = data.results.sort(() => 0.5 - Math.random());\n      let selected = shuffled.slice(0, 5);\n      dispatch({\n        type: SET_RELATED_MOVIES,\n        payload: selected\n      });\n    });\n  } catch (error) {\n    console.error(error.response);\n  }\n};\nexport const loadMore = () => async dispatch => {\n  let res = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&language=en-US&page=${++movieStore.moviePage}`);\n  let data = await res.json();\n  dispatch({\n    type: LOAD_MORE,\n    payload: data.results\n  }); // dispatch({\n  //   type: NEXT_PAGE,\n  //   payload: ++page\n  // })\n};\nexport const nextPage = page => async dispatch => {\n  dispatch({\n    type: NEXT_PAGE,\n    payload: page\n  });\n};\nexport const prevPage = page => async dispatch => {\n  page = page === 1 ? page = 2 : page;\n  dispatch({\n    type: PREV_PAGE,\n    payload: page\n  });\n};\nexport const loadMoreItems = () => {\n  let endpoint = \"\";\n  this.setState({\n    loading: true\n  });\n\n  if (this.state.searchTerm === \"\") {\n    endpoint = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US&page=${this.state.currentPage + 1}`;\n  } else {\n    endpoint = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query${this.state.searchTerm}$page=${this.state.currentPage + 1}`;\n  }\n\n  this.fetchItems(endpoint);\n};","map":{"version":3,"sources":["/Users/enoch/dev/movie-shop/client/src/actions/movie.js"],"names":["GET_MOVIE","GET_MOVIE_ERR","SET_MOVIES","SET_MOVIE_ERR","SET_SEARCHED_MOVIE","GET_SEARCHED_MOVIE","LOAD_MOVIE_DETAILS","SET_TVSHOWS_ERR","SET_TVSHOWS","GET_SHOW","GET_SHOW_ERR","SET_RELATED_MOVIES","NEXT_PAGE","PREV_PAGE","GET_RELATED_MOVIE_ID","LOAD_MORE","LOAD_MOVIES","axios","config","store","API_URL","API_KEY","IMAGE_BASE_URL","BACKDROP_SIZE","POSTER_SIZE","movieStore","getState","movie","apiKey","setSearchedMovies","dispatch","type","payload","e","getRelatedMovie","id","loadMovies","getSearchedMovie","getMovie","setMovies","res","fetch","page","data","json","results","setTvShowsReducer","tvShows","err","getShow","loadMovieDetails","setRelatedMovies","resId","get","then","shuffled","sort","Math","random","selected","slice","error","console","response","loadMore","moviePage","nextPage","prevPage","loadMoreItems","endpoint","setState","loading","state","searchTerm","currentPage","fetchItems"],"mappings":"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","sourcesContent":["import {\n  GET_MOVIE,\n  GET_MOVIE_ERR,\n  SET_MOVIES,\n  SET_MOVIE_ERR,\n  SET_SEARCHED_MOVIE,\n  GET_SEARCHED_MOVIE,\n  LOAD_MOVIE_DETAILS,\n  SET_TVSHOWS_ERR,\n  SET_TVSHOWS,\n  GET_SHOW,\n  GET_SHOW_ERR,\n  SET_RELATED_MOVIES,\n  NEXT_PAGE,\n  PREV_PAGE,\n  GET_RELATED_MOVIE_ID,\n  LOAD_MORE,\n  LOAD_MOVIES,\n} from \"../actions/types\";\nimport axios from \"axios\";\nimport config from \"../config.json\";\nimport store from \"../store\";\nimport { API_URL, API_KEY, IMAGE_BASE_URL, BACKDROP_SIZE, POSTER_SIZE } from \"../../\"\n\n\n\n\nlet movieStore = store.store.getState().movie;\n\nlet apiKey = config.API_KEY;\n\nexport const setSearchedMovies = (movie) => async (dispatch) => {\n  try {\n    dispatch({\n      type: SET_SEARCHED_MOVIE,\n      payload: movie,\n    });\n  } catch (e) {\n    return;\n  }\n};\n\nexport const getRelatedMovie = (id) => async (dispatch) => {\n  dispatch({\n    type: GET_RELATED_MOVIE_ID,\n    payload: id,\n  });\n};\n\nexport const loadMovies = () => async (dispatch) => {\n  dispatch({\n    type: LOAD_MOVIES,\n  });\n};\n\nexport const getSearchedMovie = (id) => async (dispatch) => {\n  dispatch({\n    type: GET_SEARCHED_MOVIE,\n    payload: id,\n  });\n};\n\nexport const getMovie = (id) => async (dispatch) => {\n  try {\n    dispatch({\n      type: GET_MOVIE,\n      payload: id,\n    });\n  } catch (e) {\n    dispatch({\n      type: GET_MOVIE_ERR,\n    });\n  }\n};\n\n// export const fetchMovies = () => async (dispatch) => {\n\n//   let res = await fetch(\n//     `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&language=en-US&page=${movieStore.page}`\n//   );\n\n//   let data = await res.json();\n\n// }\n\nexport const setMovies = () => async (dispatch) => {\n  let res = await fetch(\n    `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&language=en-US&page=${movieStore.page}`\n  );\n\n  let data = await res.json();\n\n  try {\n    dispatch({\n      type: SET_MOVIES,\n      payload: data.results,\n    });\n  } catch (e) {\n    dispatch({\n      type: SET_MOVIE_ERR,\n      payload: e,\n    });\n  }\n};\n\nexport const setTvShowsReducer = (tvShows) => async (dispatch) => {\n  try {\n    dispatch({\n      type: SET_TVSHOWS,\n      payload: tvShows,\n    });\n  } catch (err) {\n    dispatch({\n      type: SET_TVSHOWS_ERR,\n      payload: err,\n    });\n  }\n};\n\nexport const getShow = (id) => async (dispatch) => {\n  dispatch({\n    type: GET_SHOW,\n    payload: id,\n  });\n  try {\n  } catch (e) {\n    dispatch({\n      type: GET_SHOW_ERR,\n    });\n  }\n};\n\nexport const loadMovieDetails = () => async (dispatch) => {\n  dispatch({\n    type: LOAD_MOVIE_DETAILS,\n  });\n};\n\nexport const setRelatedMovies = () => async (dispatch) => {\n  try {\n    const resId = await axios.get(\"/api/movie/genre_id\");\n\n    await fetch(\n      `https://api.themoviedb.org/3/movie/${resId.data}/similar?api_key=${config.API_KEY}&language=en-US&page=1`\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        let shuffled = data.results.sort(() => 0.5 - Math.random());\n\n        let selected = shuffled.slice(0, 5);\n\n        dispatch({\n          type: SET_RELATED_MOVIES,\n          payload: selected,\n        });\n      });\n  } catch (error) {\n    console.error(error.response);\n  }\n};\n\nexport const loadMore = () => async (dispatch) => {\n  let res = await fetch(\n    `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&language=en-US&page=${++movieStore.moviePage}`\n  );\n\n  let data = await res.json();\n\n  dispatch({\n    type: LOAD_MORE,\n    payload: data.results,\n  });\n\n  // dispatch({\n  //   type: NEXT_PAGE,\n  //   payload: ++page\n  // })\n};\n\nexport const nextPage = (page) => async (dispatch) => {\n  dispatch({\n    type: NEXT_PAGE,\n    payload: page,\n  });\n};\n\nexport const prevPage = (page) => async (dispatch) => {\n  page = page === 1 ? (page = 2) : page;\n  dispatch({\n    type: PREV_PAGE,\n    payload: page,\n  });\n};\n\n\n\nexport const loadMoreItems = () => {\n  let endpoint = \"\";\n  this.setState({\n    loading: true,\n  });\n\n  if (this.state.searchTerm === \"\") {\n    endpoint = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US&page=${\n      this.state.currentPage + 1\n    }`;\n  } else {\n    endpoint = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query${\n      this.state.searchTerm\n    }$page=${this.state.currentPage + 1}`;\n  }\n  this.fetchItems(endpoint);\n};\n"]},"metadata":{},"sourceType":"module"}